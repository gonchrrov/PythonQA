from math import pi
import random


def test_greeting():
    """
    Напишите программу, которая выводит на экран приветствие.
    """
    name = "Анна"
    age = 25
    # Формируем строку приветствия с использованием f-строки
    output = f'Привет, {name}! Тебе {age} лет.'

    # Проверяем результат
    assert output == "Привет, Анна! Тебе 25 лет."
    print(output)


def test_rectangle():
    """
    Напишите программу, которая берет длину и ширину прямоугольника
    и считает его периметр и площадь.
    """
    a = 10
    b = 20
    # Считаем периметр прямоугольника (2*(длина + ширина))
    perimeter = (a + b) * 2

    # Проверяем правильность вычисления периметра
    assert perimeter == 60

    # Считаем площадь прямоугольника (длина * ширина)
    area = a * b

    # Проверяем правильность вычисления площади
    assert area == 200


def test_circle():
    """
    Напишите программу, которая берет радиус круга и выводит на экран его длину и площадь.
    Используйте константу PI.
    """
    r = 23
    # Считаем площадь круга (PI * радиус^2)
    area = pi * r ** 2

    # Проверяем правильность вычисления площади
    assert area == 1661.9025137490005

    # Считаем длину окружности (2 * PI * радиус)
    length = 2 * pi * r

    # Проверяем правильность вычисления длины окружности
    assert length == 144.51326206513048
    print(f'Площадь  = {area}')
    print(f'Длина окружности = {length}')


def test_random_list():
    """
    Создайте список из 10 случайных чисел от 1 до 100 (включая обе границы) и отсортируйте его по возрастанию.
    """
    # Создаем список из 10 случайных чисел в диапазоне от 1 до 100 и сортируем его.
    ls = sorted([random.randint(1, 100) for _ in range(10)])

    # Проверяем, что список содержит 10 элементов
    assert len(ls) == 10
    # Проверяем, что список отсортирован по возрастанию
    assert all(ls[i] <= ls[i + 1] for i in range(len(ls) - 1))


def test_unique_elements():
    """
    Удалите из списка все повторяющиеся элементы
    """
    ls = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 10]
    # Преобразуем список в множество, чтобы удалить дубликаты, а затем обратно в список.
    ls = list(set(ls))

    # Проверяем, что результат является списком
    assert isinstance(ls, list)

    # Проверяем, что длина списка равна 10 (без дубликатов)
    assert len(ls) == 10

    # Проверяем, что список содержит правильные уникальные элементы
    assert ls == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(ls)


def test_dicts():
    """
    Создайте словарь из двух списков.
    Используйте первый список как ключи, а второй — как значения.
    Подсказка: используйте встроенную функцию zip.
    """
    first = ["a", "b", "c", "d", "e"]
    second = [1, 2, 3, 4, 5]
    # Создаем словарь, используя функцию zip для объединения двух списков
    d = dict(zip(first, second))

    # Проверяем, что результат является словарем
    assert isinstance(d, dict)
    # Проверяем, что длина словаря равна 5
    assert len(d) == 5
    # Проверяем, что ключи словаря соответствуют первому списку
    assert list(d.keys()) == first
    # Проверяем, что значения словаря соответствуют второму списку
    assert list(d.values()) == second
